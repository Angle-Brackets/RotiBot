import discord
import requests
import time
import os
import random
import typing
import json

from discord.ext import commands
from discord import app_commands
from io import BytesIO
from PIL import Image
from enum import Enum

embed = discord.Embed(color=0xecc98e)
models = ["Pro", "Realism", "Anime", "3D"] # Standard Model is used if None are Selected

class Generate(commands.GroupCog, group_name = "generate"):
    def __init__(self, bot : commands.Bot):
        super().__init__()
        self.bot = bot

    @app_commands.command(name="waifu", description="Have a randomly generated waifu appear. They do not exist sadly.")
    async def _gen_waifu(self, interaction : discord.Interaction):
        await interaction.response.defer()
        url = r"https://api.waifu.im/search"

        req = requests.get(url=url)
        response = json.loads(req.content)
        result = embed.copy()
        result.set_footer(text="Image provided by https://waifu.im")
        result.set_image(url=response["images"][0]["url"])

        await interaction.followup.send(embed=result)

    @app_commands.command(name="image", description="Have an AI generate...anything! Use this command at your own risk!")
    @app_commands.describe(prompt="The image prompt given to the AI", style="Style of image")
    async def _gen_image(self, interaction: discord.Interaction, prompt : str, style : typing.Optional[Enum("Model", models)]):
        await interaction.response.defer()
        seed = random.randint(0, 10*100)
        model = f"Flux-{style}" if style else "Flux"
        query = f"https://pollinations.ai/p/{prompt}?seed={seed}&model={model}"

        headers = {"Accept": "image/png"}
        req = requests.get(query, headers=headers)
        result = embed.copy()
        result.set_footer(text="Image generated by Pollinations AI, https://image.pollinations.ai/")

        if req.status_code == 200:
            # Builds a unique file name and then decodes the binary data returned into the png, then deletes it.
            t = time.time_ns()
            file_name = f"{t}-{interaction.guild_id}.png"
            image_data = BytesIO(req.content)
            image = Image.open(image_data)
            image.save(file_name, format="PNG")
            file = discord.File(file_name, filename=file_name)
            result.set_image(url=f"attachment://{file_name}")

            await interaction.followup.send(file=file, embed=result)

            os.remove(path=file_name)
            
            return
        
        await interaction.followup.send(content="Unable to generate image")

async def setup(bot: commands.Bot):
    await bot.add_cog(Generate(bot))




