import discord
import requests
import time
import json
import asyncio

from cogs.generate.RotiBrain import RotiBrain
from discord.ext import commands
from discord import app_commands

from typing import Optional, List
from utils.RotiUtilities import cog_command

embed = discord.Embed(color=0xecc98e)

@cog_command
class Generate(commands.GroupCog, group_name = "generate"):
    def __init__(self, bot : commands.Bot):
        super().__init__()
        self.bot = bot
        self.brain = RotiBrain()

    @app_commands.command(name="waifu", description="Have a randomly generated waifu appear. They do not exist sadly.")
    async def _gen_waifu(self, interaction : discord.Interaction):
        await interaction.response.defer()
        url = r"https://api.waifu.im/search"

        req = requests.get(url=url)
        response = json.loads(req.content)
        result = embed.copy()
        result.set_footer(text="Image provided by https://waifu.im")
        result.set_image(url=response["images"][0]["url"])

        await interaction.followup.send(embed=result)

    @app_commands.command(name="image", description="Have an AI generate...anything! Use this command at your own risk!")
    @app_commands.describe(prompt="The image prompt given to the AI", model="Image Model to use")
    async def _gen_image(self, interaction: discord.Interaction, prompt : str, model : Optional[str]):
        await interaction.response.defer(ephemeral=True)
        await interaction.followup.send(content="Generating image...this may take a bit...", ephemeral=True)
         # Lets us have multiple people querying the bot at a time.
        buffer = await asyncio.to_thread(self.brain.generate_image, prompt, model)

        if buffer:
            file_name = f"{time.time_ns()}-{interaction.guild_id}.png"
            file = discord.File(buffer, filename=file_name)

            # Set the embed image URL to use the file name
            result = embed.copy()
            result.set_footer(text="Image generated by Pollinations AI, https://image.pollinations.ai/")
            result.set_image(url=f"attachment://{file_name}")

            await interaction.followup.send(content=f"-# Prompt: \"{prompt}\"\n-# By: <@{interaction.user.display_name}>", file=file, embed=result)
            return
        
        await interaction.followup.send(content="Unable to generate image", ephemeral=True)
    
    @app_commands.command(name="text", description="Have Roti respond to what you say!")
    @app_commands.describe(prompt="The text prompt you want to give to Roti without any prior context.", model="Text Model to use")
    async def _gen_text(self, interaction : discord.Interaction, prompt : str, model : Optional[str]):
        await interaction.response.defer()
        response : str | None = await asyncio.to_thread(self.brain.generate_ai_response, prompt, None, None, model)
        if not response:
            await interaction.followup.send("An error has occured, try again later.")
        await interaction.followup.send(response)

    @_gen_image.autocomplete(name="model")
    async def _gen_image_autocomplete(self, interaction : discord.Interaction, current : str) -> List[app_commands.Choice]:
        image_model_options = [
            app_commands.Choice(name=model.name, value=model.name) for
            model in 
            self.brain.image_models if 
            current.lower() in model.name.lower()
        ]

        return image_model_options

    @_gen_text.autocomplete(name="model")
    async def _gen_text_autocomplete(self, interaction : discord.Interaction, current : str) -> List[app_commands.Choice]:
        text_model_options = [
            app_commands.Choice(name=model.description, value=model.name) for
            model in
            self.brain.text_models.values() if 
            current.lower() in model.description.lower() or current.lower() in model.name.lower()
        ]

        return text_model_options

async def setup(bot: commands.Bot):
    await bot.add_cog(Generate(bot))